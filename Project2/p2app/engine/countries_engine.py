# p2app/engine/countries_engine.py
#
# ICS 33 Winter 2024
# Project 2: Learning to Fly

import sqlite3
from p2app.events import *

class Countries:
    """
    This object processes all the country-related events sent to it by the user interface,
    then generate events that are sent back to the user interface in response, into a list.
    """

    def __init__(self):
        """Initializes the countries engine"""
        pass

    def event_handler(self, connection: sqlite3.Connection, event: 'events') -> list['events']:
        """
        Returns a list of all the events that should be generated by the main module as the response,
        given the events sent to it by the user interface.
        """
        events = []
        if isinstance(event, StartCountrySearchEvent):
            if not event.country_code():
                statement = 'SELECT * FROM country WHERE name = ?;'
                parameters = (event.name(), )
            elif not event.name():
                statement = 'SELECT * FROM country WHERE country_code = ?;'
                parameters = (event.country_code(), )
            else:
                statement = 'SELECT * FROM country WHERE country_code = ? AND name = ?;'
                parameters = (event.country_code(), event.name())

            cursor = connection.execute(statement, parameters)
            results = cursor.fetchall()
            for result in results:
                country = Country(result[0], result[1], result[2], result[3], result[4], result[5])
                events.append(CountrySearchResultEvent(country))
            cursor.close()

        if isinstance(event, LoadCountryEvent):
            statement = 'SELECT * FROM country WHERE country_id = ?;'
            parameter = (event.country_id(), )
            cursor = connection.execute(statement, parameter)
            loaded_country = cursor.fetchone()

            events.append(CountryLoadedEvent(Country(loaded_country[0], loaded_country[1], loaded_country[2], loaded_country[3], loaded_country[4], loaded_country[5])))
            cursor.close()

        if isinstance(event, SaveNewCountryEvent):
            try:
                statement = 'INSERT INTO country (country_code, name, continent_id, wikipedia_link, keywords) VALUES (:country_code, :name, :continent_id, :wikipedia_link, :keywords);'
                new_country = event.country()
                if event.country()[4] is None:
                    new_country = event.country()._replace(wikipedia_link = '')
                parameters = {'country_code': new_country[1], 'name': new_country[2], 'continent_id': new_country[3], 'wikipedia_link': new_country[4], 'keywords': new_country[5]}
                cursor = connection.execute(statement, parameters)
                connection.commit()

                added_country = Country(cursor.lastrowid, new_country[1], new_country[2], new_country[3], new_country[4], new_country[5])
                events.append(CountrySavedEvent(added_country))
                cursor.close()


            except sqlite3.IntegrityError as e:
                if "UNIQUE constraint failed" in str(e):
                    events.append(SaveCountryFailedEvent('Duplicate country_code Not Allowed'))
                elif "FOREIGN KEY constraint failed" in str(e):
                    events.append(SaveCountryFailedEvent('Invalid continent_code'))


        if isinstance(event, SaveCountryEvent):
            try:
                statement = 'UPDATE country SET country_code = ?, name = ?, continent_id = ?, wikipedia_link = ?, keywords = ? WHERE country_id = ?;'
                new_country = event.country()
                if event.country()[4] is None:
                    new_country = event.country()._replace(wikipedia_link = '')
                parameters = (new_country[1], new_country[2], new_country[3], new_country[4], new_country[5], new_country[0])
                connection.execute(statement, parameters)
                connection.commit()

                modified_country = Country(new_country[0], new_country[1], new_country[2], new_country[3], new_country[4], new_country[5])
                events.append(CountrySavedEvent(modified_country))

            except sqlite3.IntegrityError as e:
                if "UNIQUE constraint failed" in str(e):
                    events.append(SaveCountryFailedEvent('Duplicate country_code Not Allowed'))
                elif "FOREIGN KEY constraint failed" in str(e):
                    events.append(SaveCountryFailedEvent('Invalid continent_code'))

        return events